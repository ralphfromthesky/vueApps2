import{r as a,d as r,O as i,P as d,Q as c,R as u,o as h,c as p,a as e,h as t,t as s}from"./index-e159c977.js";const m={class:"border-2 w-[50rem] p-[1rem]"},_=e("div",{class:"my-[1rem] text-[2rem]"},[e("h1",null,"LIFE CYCLE HOOKS")],-1),g=e("span",{class:"text-[red]"},"onBeforeMount",-1),b={class:"text-[red]"},f=e("br",null,null,-1),v=e("span",{class:"text-[red]"},"onMounted",-1),y=e("br",null,null,-1),M={class:"text-[red] text-center"},O=e("br",null,null,-1),U=e("span",{class:"text-[red]"},"onBeforeUpdate",-1),w=e("br",null,null,-1),x={class:"text-[red]"},D=e("br",null,null,-1),T=e("span",{class:"text-[red]"}," onUpdated",-1),k=e("br",null,null,-1),B=e("br",null,null,-1),C=e("br",null,null,-1),V=e("br",null,null,-1),I=e("br",null,null,-1),N=e("br",null,null,-1),R={class:"text-[red]"},E=e("br",null,null,-1),H=e("div",null,[t(" The "),e("span",{class:"text-[red]"},"onUnmounted"),t(" hook in Vue 3 is triggered when the component is being removed from the DOM. This can happen in various scenarios, including: Navigation: If you're using Vue Router or a similar routing library, onUnmounted will be triggered when the user navigates away from the current route that contains the component. Conditional Rendering: If the component is conditionally rendered and the condition changes to false, causing the component to be removed from the DOM, onUnmounted will be triggered. Direct Removal: If you programmatically remove the component from its parent (e.g., using v-if or v-show directives, or manipulating the DOM directly), onUnmounted will be triggered. Destroying Parent Component: If the parent component of the current component is unmounted, onUnmounted will be triggered for all its child components. ")],-1),F={__name:"LifeCycleHooks",setup(L){const n=a("ralph santolorin"),o=a("Hello, Vue!");r(()=>{setTimeout(()=>{n.value="ano pangalan mo????"},5e3)}),i(()=>{console.log("this componment is about to be mounted"),o.value="this message is about to be mounted"});const l=()=>{n.value="na updated na ang name!!!"};return d(()=>{o.value="this is the value before it updates"}),c(()=>{o.value=o.value,console.log(n.value)}),u(()=>{console.log("onunMounted")}),(P,S)=>(h(),p("div",null,[e("div",m,[_,e("div",null,[t(" this "),g,t(" will be render before the element will be inserted in the DOM, The component is set up, but the DOM is not yet created. Operations in this hook occur before the initial render. "),e("span",b,s(o.value),1)]),f,e("div",null,[e("span",null,[t(" this "),v,t(" will trigger rigth after the component display in the template, The component's DOM elements have been created and inserted into the document. Operations in this hook occur after the initial render, allowing access to the DOM. "),y,t(" changes in 5 seconds: "),e("span",M,s(n.value),1)])]),O,e("div",null,[t(" the "),U,t(),w,t(" Usage: Called before the component updates, right before the DOM patching. beforeUpdate: "),e("span",x,s(n.value),1)]),D,e("div",null,[t(" The "),T,t(" lifecycle hook in Vue 3 is called after the component has been updated. This hook is particularly useful for performing actions that need to occur after the component's data has changed and the DOM has been re-rendered. "),k,B,e("button",{class:"p-[1rem] bg-[gray]",onClick:l},"Update"),C,V,t(" When to Use onUpdated To perform actions that need to occur after a data change has caused the component to re-render. To access the updated DOM elements. To integrate with third-party libraries that require updated DOM elements. "),I,N,e("span",R,s(n.value),1)]),E,H])]))}};export{F as default};
